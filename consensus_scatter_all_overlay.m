%--------------------------------------------------------------------------
% Author: Mirko Palla, PhD.
% Date: July 27, 2017
%
% For: Single molecule DNA sequencing via aHL nanopore array at the Church
% Lab - Genetics Department, Harvard Medical School.
%
% Purpose: This program receives a set of MAT-files, one for each ('pol-bar') 
% experiment, containing all alignment parameters generated by 
% 'consensus_alignment.m'. Then, for each 'pol-bar', it iterates through 
% the experimental structures and generates scatter plots featuring 
% consesnsus alignment accuracy (%) versus alignment length for each 
% 'pol-bar' case displaying them on the same plot for comparison. NOTE: 
% Use MATLAB R2017a to run this code, older version might trigger errors.
% Fix 'pol', vary 'bar'.
%
% This software may be used, modified, and distributed freely, but this
% header may not be modified and must appear at the top of this file.
%--------------------------------------------------------------------------

function consensus_scatter_all_overlay

%-------------------------------------------------------------------------%
%                                 STARTUP                                 %
%-------------------------------------------------------------------------%

% Start timer.
tic 

fprintf('\n');
disp('--> Consensus scatter all overlay start');
fprintf('\n');

% Set default number formatting.
format short;

% Turn off warnings during run.
warning('off', 'all');

% Define current working and data directory.
work_dir = pwd;

% Define barcode list.
barcodes = {'comp3', 'fv2', 'rep3'};

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
%                          DIRECTORY NAVIGATION                           %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

disp('--> DIRECTORY NAVIGATION SECTION');

% Navigate to 'pol-bar' MAT-file directory.
data_dir = strcat(work_dir, '/data/mat_files/cons');
cd(data_dir);

disp(['--> IN DIRECTORY: ' data_dir]);

% Read in all 'experiment' folder names one-by-one.
list = dir('pol6*_*cons*.mat');

% Figure counter.
counter = 1;

disp('--> NORMALIZED SCATTER PLOTTING SECTION');
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
%                              SCATTER PLOTTING                           %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Generate 'experimental set' directory to hold the scatter plots.
cdir = 'consesnsus_scatter_all_overlay';

% Define direcory to hold figures.
if ~exist(cdir, 'dir')
  mkdir(cdir);
end

% Iterate through all 'pol' folders.
 for e = 1:length(list) 
     
    % Iterate through all three barcodes.
    for bar = 1:length(barcodes)  
        
        % Define array container for fixed 'bar' and grouping variable array.
        BAR = []; GE = []; 
        BAR_2 = []; GE_2 = []; 
        BAR_3 = []; GE_3 = [];

        % Define array container for 'coi' and grouping variable array.
        COI = []; ge = []; 
        COI_2 = []; ge_2 = []; 
        COI_3 = []; ge_3 = [];

        % Load nanopore data structure per experimental set (pol-bar).
        load(list(e).name);
        disp(['--> MAT-FILE LOADED: ' list(e).name]);
        ss = strsplit(list(e).name, '.');

        % Iterate through all 'experiment' folders for (pol-)bar.
        for exp = 1:length(cons_list(bar).experiment)

            % Iterate through all experiments per (pol-)bar and plot desired field. 
            pb = cons_list(bar).experiment(exp).s;

            % Find 'coi' values.
            norm = extractfield(pb, 'cons_identity')./100;
            norm_2 = extractfield(pb, 'cons_identity_2')./100;
            norm_3 = extractfield(pb, 'cons_identity_3')./100;

            % Generate container arrays for all experiments.
            COI = [COI; norm'];
            COI_2 = [COI_2; norm_2'];
            COI_3 = [COI_3; norm_3'];
            
            % Find align copy values for each 'coi'.
            align_length = extractfield(pb, 'alignment_length');
            
            % Update concatinated grouping variable array.
            ge = [ge; align_length(1:length(norm))'];
            ge_2 = [ge_2; align_length(1:length(norm_2))'];
            ge_3 = [ge_3; align_length(1:length(norm_3))'];

        end

        % Generate container array for 'pol-bar' combination (fix bar).
        BAR = [BAR; COI];
        BAR_2 = [BAR_2; COI_2];
        BAR_3 = [BAR_3; COI_3];
        
        % Update concatinated grouping variable array.
        GE = [GE; ge];
        GE_2 = [GE_2; ge_2];
        GE_3 = [GE_3; ge_3]; 
        
        % Generate figure for each pol-bar combination.
        figure(counter);

        % Create dwell time (s) boxplot of all filtered events (exp).
        scatter(GE, BAR, 'r', 'o', 'filled');
        hold on;
        scatter(GE_2, BAR_2, 'b', 's', 'filled');
        hold on;
        scatter(GE_3, BAR_3, 'k', '^', 'filled');
        grid;
        title('consensus identity vs. alignment length');
        xlabel('alignment length');
        ylabel('consensus identity');
        ylim([0 1.1]);

        % Determine legend entries for each case.                      
        if strcmp(barcodes{bar}, 'comp3')                            
            bar2 = barcodes{2};
            bar3 = barcodes{3};

        elseif strcmp(barcodes{bar}, 'fv2')
            bar2 = barcodes{1};
            bar3 = barcodes{3};

        else
            bar2 = barcodes{1};
            bar3 = barcodes{2};

        end

        % Display legend.
        legend(barcodes{bar}, bar2, bar3);

        % Save plot.
        pp = strsplit(ss{1}, '_');
        fn = [pp{1}, '_', barcodes{bar}, '_scat'];
        savefig([fn, '.fig']);
        print('-dbmp', [fn, '.bmp']);

        % Update counter.
        counter = counter + 1;

        disp(['--> PROCESSED DATA SET: ' fn]); 
        
    end   
end    
    
% Move all figures to 'plots' directory.
movefile('*.fig', cdir);
movefile('*.bmp', cdir);

% Close all open figures.
close all;        

% Navigate to working directory.
cd(work_dir);

fprintf('\n');
disp('--> Consensus scatter all overlay end');
fprintf('\n');

% End timer.
toc