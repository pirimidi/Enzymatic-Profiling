%--------------------------------------------------------------------------
% Author: Mirko Palla, PhD.
% Date: May 30, 2017
%
% For: Single molecule DNA sequencing via aHL nanopore array at the Church
% Lab - Genetics Department, Harvard Medical School.
%
% Purpose: This program receives a set of MAT-files, one for each ('pol-bar') 
% experiment, containing all alignment parameters generated by 
% 'consensus_alignment.m'. Then, for each 'pol-bar', it iterates through 
% the experimental structures and generates scatter plots featuring 
% consesnsus alignment accuracy (%) versus alignment length for each 
% 'pol-bar' case displaying them on the same plot for comparison. NOTE: 
% Use MATLAB R2017a to run this code, older version might trigger errors.
%
% This software may be used, modified, and distributed freely, but this
% header may not be modified and must appear at the top of this file.
%--------------------------------------------------------------------------

function alignment_scatter

%-------------------------------------------------------------------------%
%                                 STARTUP                                 %
%-------------------------------------------------------------------------%

% Start timer.
tic 

fprintf('\n');
disp('--> Alignment scatter start');
fprintf('\n');

% Set default number formatting.
format short;

% Turn off warnings during run.
warning('off', 'all');

% Define current working and data directory.
work_dir = pwd;

% Define barcode list.
barcodes = {'fv2', 'mfe'};

% Colors palette.
color_id = {'r', 'b'};

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
%                          DIRECTORY NAVIGATION                           %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

disp('--> DIRECTORY NAVIGATION SECTION');

% Navigate to 'pol-bar' MAT-file directory.
data_dir = strcat(work_dir, '\data\mat_files\');
cd(data_dir);

disp(['--> IN DIRECTORY: ' data_dir]);

% Read in all 'experiment' folder names one-by-one.
list = dir('pol6*_*cons*.mat');

% Figure counter.
counter = 1;

disp('--> NORMALIZED SCATTER PLOTTING SECTION');
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
%                              SCATTER PLOTTING                           %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Generate 'experimental set' directory to hold the scatter plots.
cdir = 'alignment_scatter';

% Define direcory to hold figures.
if ~exist(cdir, 'dir')
  mkdir(cdir);
end

% Iterate through all 'pol' folders.
 for e = 1:length(list) 
        
    % Load nanopore data structure per experimental set (pol-bar).
    load(list(e).name);
    disp(['--> MAT-FILE LOADED: ' list(e).name]);
    ss = strsplit(list(e).name, '.');

    % Generate figure for each pol-bar combination.
    figure(counter);
    
    % Iterate through all barcodes.
    for bar = 1:length(barcodes)  

        % Define array container for 'coi' and grouping variable array.
        COI = []; GE = []; 

        % Iterate through all 'experiment' folders for (pol-)bar.
        for exp = 1:length(cons_list(bar).experiment)
            
            % Iterate through all experiments per (pol-)bar and plot desired field. 
            pb = cons_list(bar).experiment(exp).s;

            % Find 'coi' values.
            norm = extractfield(pb, 'identity')./100;

            % Generate container arrays for all experiments.
            COI = [COI; norm'];
            
            % Find align copy values for each 'coi'.
            align_length = extractfield(pb, 'alignment_length');
            
            % Update concatinated grouping variable array.
            GE = [GE; align_length'];

        end
        
        % Create dwell time (s) boxplot of all filtered events (exp).
        scatter(GE, COI, color_id{bar}, 'o', 'filled');
        hold on;
        
    end

    grid;
    title('raw identity vs. alignment length');
    xlabel('alignment length');
    ylabel('raw identity');
    ylim([0 1.1]);

    % Display legend.
    legend(barcodes);

    % Save plot.
    pp = strsplit(ss{1}, '_');
    fn = [pp{1}, '_scat'];
    savefig([fn, '.fig']);
    print('-dbmp', [fn, '.bmp']);

    % Update counter.
    counter = counter + 1;

    disp(['--> PROCESSED DATA SET: ' fn]);    
        
end    
    
% Move all figures to 'plots' directory.
movefile('*.fig', cdir);
movefile('*.bmp', cdir);

% Close all open figures.
close all;        

% Navigate to working directory.
cd(work_dir);

fprintf('\n');
disp('--> Alignment scatter end');
fprintf('\n');

% End timer.
toc