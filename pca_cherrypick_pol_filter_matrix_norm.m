%--------------------------------------------------------------------------
% Author: Mirko Palla, PhD.
% Date: Jult 24, 2017
%
% For: Single molecule DNA sequencing via aHL nanopore array at the Church
% Lab - Genetics Department, Harvard Medical School.
%
% Purpose: This program receives a MAT-file, containing all alignment 
% parameters generated by 'consensus_alignment_96.m'. Then, it iterates 
% through the experimental structures and collects all pore IDs, which are 
% categorized as a high-probability barcode hits (consensus alignment 
% accuracy (CAA) > 80%, 50 bp < alignment length < 500 bp), and are in the 
% 2D (dwell time, FCR) KP rectangle defined priory. Next, it selects the
% ones with the highest CAA for each pore ID with multiple potential 
% barcode hits. Finally, given a specific 2D kinetic rectangle, it 
% caluclates the PCA based on the 20 KP associated with this list of pores.
% This can be mapped back to PCA Fig. 6 in the main text for RPol
% verification. NOTE: Use MATLAB R2017a to run this code, older 
% version might trigger errors.
%
% This software may be used, modified, and distributed freely, but this
% header may not be modified and must appear at the top of this file.
%--------------------------------------------------------------------------

function pca_cherrypick_pol_filter_matrix_norm(type, scaler)

%-------------------------------------------------------------------------%
%                                 STARTUP                                 %
%-------------------------------------------------------------------------%

% Start timer.
tic 

fprintf('\n');
disp('--> PCA cherry pick filter matrix norm start');
fprintf('\n');

% Set default number formatting.
format short;

% Turn off warnings during run.
warning('off', 'all');

% Define current working and data directory.
work_dir = pwd;

if type == 'RPol1'
    
    % Limits for RPol1.
    dt_min = 0.45;
    dt_max = 0.64;
    fcr_min = 1.8;
    fcr_max = 3;
    dt_std = 0.1682;
    fcr_std = 0.7849;
    
    set1 = 1:32; set2 = 33:64;
    
elseif type == 'RPol2'
    
    % Limits for RPol2.
    dt_min = 0.9;
    dt_max = 1.9;
    fcr_min = 0.5;
    fcr_max = 0.9;
    dt_std = 0.4606;
    fcr_std = 0.2711;
    
    set1 = 33:64; set2 = 65:96;
    
elseif type == 'RPol3'
    
    % Limits for RPol3.
    dt_min = 0.65;
    dt_max = 0.85;
    fcr_min = 1.3;
    fcr_max = 1.9;
    dt_std = 0.2853;
    fcr_std = 0.6060;  
    
    set1 = 1:32; set2 = 65:96;
    
else
    
    % Throw an error message for usage.
    error('--> ERROR! Usage: RPol#, where # = {1,2,3}!');

end    
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
%                          DIRECTORY NAVIGATION                           %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

disp('--> DIRECTORY NAVIGATION SECTION');

% Navigate to MAT-file directory.
mat_dir = strcat(work_dir, '\data\final_set\mat_files');
cd(mat_dir);

disp(['--> IN DIRECTORY: ' mat_dir]);

% Read in a TXT file for predefined 96 naive barcodes.
bar_seqs = fastaread('unique_barcodes_50%.txt');

% Read in all 'experiment' folder names one-by-one.
list = dir('pol6*_*merge*.mat');
   
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
%                             DATA FILTERING                              %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

disp('--> DATA FILTERING SECTION');

% Figure counter.
counter = 1;

% Create empty data matrix.
DATA = [];

% Generate 'experimental set' di rectory to hold the scatter plots.
cdir = 'pca_cherrypick';

% Define direcory to hold figures.
if ~exist(cdir, 'dir')
  mkdir(cdir);
end

% Read filtered data matrix in.           
DATA = dlmread('data_matrix.txt');
        
% Define limits.
dt_min = dt_min - dt_std*scaler;
dt_max = dt_max + dt_std*scaler;

fcr_min = fcr_min - fcr_std*scaler;
fcr_max = fcr_max + fcr_std*scaler;

% Filter out all pores, which is inside the 2D kinetic parameter rectangle.
% Base A.
i1 = (DATA(:,6)>dt_min) & (DATA(:,6)<dt_max) & (DATA(:,4)>fcr_min) & (DATA(:,4)<fcr_max);
DATA1 = DATA(i1,:);
[rows cols] = size(DATA1)

% Base C.
i2 = (DATA1(:,11)>dt_min) & (DATA1(:,11)<dt_max) & (DATA1(:,9)>fcr_min) & (DATA1(:,9)<fcr_max);
DATA2 = DATA1(i2,:);
[rows cols] = size(DATA2)

% Base G.
i3 = (DATA2(:,16)>dt_min) & (DATA2(:,16)<dt_max) & (DATA2(:,14)>fcr_min) & (DATA2(:,14)<fcr_max);
DATA3 = DATA2(i3,:);
[rows cols] = size(DATA3)

% Base T.
i4 = (DATA3(:,21)>dt_min) & (DATA3(:,21)<dt_max) & (DATA3(:,19)>fcr_min) & (DATA3(:,19)<fcr_max);
FINAL = DATA3(i4,:);
[rows cols] = size(FINAL)

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
%                         HISTOGRAM PLOTTING                              %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Filter out unique barcodes if more then one identified for a
% single pore.
[unique_barcode_id, id, ie] = unique(FINAL(:,1));
unique_barcode_id

[N,edges] = histcounts(FINAL(:,1), 96);
Y = (sum(N(set1))+sum(N(set2)))/(length(N(set1))+length(N(set2)));
C = ceil(Y);

M = N-C;
M(M<0)=0;

U=[];
for a = 1:length(M)
	for b = 1:M(a)
		U = [U; a];
	end
end

% Create histogram for 'all' barcode hits (even multiple hits per pore).
figure(1);
histogram(U, 96);
title(['all unique barcode distribution: ' num2str(type)]);
xlabel('barcode id');
ylabel('count');
%y_lim = ylim; axis([0 97 0 y_lim(2)+1]);
y_lim = ylim; axis([0 97 0 60]);
xticks(1:96);
xtickangle(45);
legend([' > barcodes = ', num2str(length(unique_barcode_id)), ...
    ' > total counts = ', num2str(rows)]);
figureFullScreen(counter);

% Save plot.
fn = [num2str(type), '_cherrypick_unique_count'];
savefig([fn, '.fig']);
print('-dbmp', [fn, '.bmp']);
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
%                         PCA MAPBACK PLOTTING                            %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Final filtered matrix of data (pores) for PCA analysis.
BAR = FINAL(:, 4:end);

% Calculate principle components of data matrix.
opt = statset('pca'); opt.MaxIter = 1e+6;
[coeff, score, latent, tsquared, explained, mu] = pca(BAR, 'Algorithm', 'svd', 'Options', opt);
P = BAR*coeff;
PC1 = P(:,1); PC2 = P(:,2);

% Create 2D plot of PC1 vs. PC2.
figure(2);
scatter(PC1, PC2, 'o', 'LineWidth', 1);
grid;
title(['Cherry-picked PCA to Map Back: ', num2str(type)]);
xlabel('PC1');
ylabel('PC2');
axis([-4 8 -4 10]);
hold on;

size(BAR)
explained 

% Write data used in PCA to a matrix and save it.           
dlmwrite([num2str(type), '_pca_matrix.txt'], BAR, 'delimiter', '\t', 'precision', '%.4f');
disp('--> PROCESSED DATA SET: data_matrix.txt'); 

% Save plot.
savefig([num2str(type), '_pca_cherrypick_pol_filter.fig']);
print('-dbmp', [num2str(type), '_pca_cherrypick_pol_filter.bmp']);

% Move all figures to 'plots' directory.
movefile('*.fig', cdir);
movefile('*.bmp', cdir);

% Close all open figures.
close all;   

% Navigate to working directory.
cd(work_dir);

fprintf('\n');
disp('--> PCA cherry pick filter matrix norm end');
fprintf('\n');

% End timer.
toc