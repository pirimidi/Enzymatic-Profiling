%--------------------------------------------------------------------------
% Author: Mirko Palla, PhD.
% Date: July 27, 2017
%
% For: Single molecule DNA sequencing via aHL nanopore array at the Church
% Lab - Genetics Department, Harvard Medical School.
%
% Purpose: This program receives a set of MAT-files, one for each ('pol-bar') 
% experiment, containing all alignment parameters generated by 
% 'consensus_alignment.m'. Then, for each 'pol-bar', it iterates through 
% the experimental structures and generates scatter plots featuring 
% consesnsus alignment accuracy (%) versus alignment length for each 
% 'pol-bar' case displaying them on the same plot for comparison. NOTE: 
% Use MATLAB R2017a to run this code, older version might trigger errors.
% Fix 'pol', vary 'bar'.
%
% This software may be used, modified, and distributed freely, but this
% header may not be modified and must appear at the top of this file.
%--------------------------------------------------------------------------

function consensus_scatter_all_collapsed

%-------------------------------------------------------------------------%
%                                 STARTUP                                 %
%-------------------------------------------------------------------------%

% Start timer.
tic 

fprintf('\n');
disp('--> Consensus scatter all collapsed start');
fprintf('\n');

% Set default number formatting.
format short;

% Turn off warnings during run.
warning('off', 'all');

% Define current working and data directory.
work_dir = pwd;

% Define barcode list.
barcodes = {'comp3', 'fv2', 'rep3', 'rand', 'flan'};

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
%                          DIRECTORY NAVIGATION                           %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

disp('--> DIRECTORY NAVIGATION SECTION');

% Navigate to 'pol-bar' MAT-file directory.
data_dir = strcat(work_dir, '/data/mat_files/');
cd(data_dir);

disp(['--> IN DIRECTORY: ' data_dir]);

% Read in all 'experiment' folder names one-by-one.
list = dir('pol*_*cons_align*.mat');

% Figure counter.
counter = 1;

disp('--> NORMALIZED SCATTER PLOTTING SECTION');
    
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%                                                                         %
%                              SCATTER PLOTTING                           %
%                                                                         %
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Generate 'experimental set' directory to hold the scatter plots.
cdir = 'consesnsus_scatter_all_collapsed';

% Define direcory to hold figures.
if ~exist(cdir, 'dir')
  mkdir(cdir);
end

% Iterate through all 'pol' folders.
 for e = 1:length(list) 

    % Load nanopore data structure per experimental set (pol-bar).
    load(list(e).name);
    disp(['--> MAT-FILE LOADED: ' list(e).name]);
    ss = strsplit(list(e).name, '.');

    % Define array container for 'coi' and grouping variable array.
    COI = []; ge = []; 
        
    % Iterate through all three barcodes.
    for bar = 1:length(barcodes)  

        % Iterate through all 'experiment' folders for (pol-)bar.
        for exp = 1:length(cons_list(bar).experiment)

            % Iterate through all experiments per (pol-)bar and plot desired field. 
            pb = cons_list(bar).experiment(exp).s;
            
            % Find filtered pores with valid 'cons_identity' value.
            i_1 = extractfield(pb, 'cons_identity') > 0;   
            pb_f1 = pb(i_1);
            
            % Only look at structures with elements (can be empty).
            if length(pb_f1) > 1
            
                % Find 'coi' values.
                norm = extractfield(pb_f1, 'cons_identity')./100;

                % Generate container arrays for all experiments.
                COI = [COI; norm'];
            
                % Update concatinated grouping variable array.
                for b = 1:length(norm)
                    ge = [ge; bar];
                end 
                
            end
        end        
    end   
 end    
    
% Generate figure for each pol-bar combination.
figure(1);

% Create dwell time (s) boxplot of all filtered events (exp).
% CategoricalScatterplot(COI, ge, ...
%                        'WhiskerLine', false, ...
%                        'BoxColor', [0.8471 0.8627 0.8392], ...
%                        'WhiskerColor',[0.8235 0.7412 0.0392]);

CategoricalScatterplot(COI, ge, ...
                       'Marker', 'o', ...
                       'MarkerSize', 1, ...
                       'FillMarker', false, ...
                       'spreadWidth', 0.05, ...
                       'boxWidth', 0.1, ...
                       'WhiskerLine', false, ...
                       'BoxColor', [0.8471 0.8627 0.8392], ...
                       'WhiskerColor',[0 0 1]);

% CategoricalScatterplot(COI, ge, ...
%                        'Marker', 'o', ...
%                        'MarkerSize', 2, ...
%                        'FillMarker', true, ...
%                        'BoxColor', [0.8471 0.8627 0.8392], ...
%                        'BoxEdgeColor', [0 0 1], ...
%                        'MedianColor', [0 0 1], ...
%                        'WhiskerColor', [0.8235 0.7412 0.0392], ...
%                        'BoxAlpha', 0, ...
%                        'BoxLineStyle', '-', ...
%                        'WhiskerLine', false, ...
%                        'MedianLineStyle', '-', ...
%                        'WhiskerLineStyle', '-', ...
%                        'BoxLineWidth', 2, ...
%                        'MedianLineWidth', 2, ...
%                        'WhiskerLineWidth', 2);

grid;
title('consensus identity vs. experimental id');
xlabel('experimental id');
ylabel('consensus identity');
ylim([0 1.1]);

% Save plot.
fn = 'pol-bar_mixing';
savefig([fn, '.fig']);
print('-dbmp', [fn, '.bmp']);

disp(['--> PROCESSED DATA SET: ' fn]); 
        
% Move all figures to 'plots' directory.
movefile('*.fig', cdir);
movefile('*.bmp', cdir);

% Close all open figures.
close all;        

% Navigate to working directory.
cd(work_dir);

fprintf('\n');
disp('--> Consensus scatter all collapsed end');
fprintf('\n');

% End timer.
toc